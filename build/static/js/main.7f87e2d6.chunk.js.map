{"version":3,"sources":["services/local-list.service.ts","components/ListItem.tsx","components/List.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["LocalForage","config","driver","LOCALSTORAGE","name","KEY","done","a","getItem","list","undefined","filter","item","id","this","all","index","findIndex","splice","setItem","foundItem","find","Object","assign","text","lastInsertedID","length","push","ListItem","props","state","editing","setState","onCheck","onDelete","classList","className","join","type","value","onChange","e","target","onClick","leaveEditMode","enterEditMode","onEdit","React","Component","List","filters","label","items","fetchData","bind","prevProps","prevState","snapshot","Fragment","placeholder","autoFocus","onKeyDown","code","enter","map","checkItem","deleteItem","editItem","ListService","then","edit","create","window","confirm","delete","trim","createItem","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f87e2d6.chunk.js","sourcesContent":["import LocalForage from 'localforage';\r\n\r\nLocalForage.config({\r\n    driver: LocalForage.LOCALSTORAGE,\r\n    name: 'list'\r\n});\r\nconst KEY = 'list';\r\n\r\ninterface Service {\r\n    all(done?: boolean): Promise<Item[]>;\r\n\r\n    edit(id: number, item: Partial<Item>): Promise<void>;\r\n\r\n    delete(id: number): Promise<void>;\r\n\r\n    create(text: string): Promise<void>;\r\n}\r\n\r\nexport interface Item {\r\n    id: number;\r\n    text: string;\r\n    done: boolean;\r\n}\r\n\r\nclass ListService implements Service {\r\n    async all(done?: boolean): Promise<Item[]> {\r\n        const list: Item[] = (await LocalForage.getItem<Item[]>(KEY)) || [];\r\n\r\n        return (done === undefined) ? list : list.filter(item => item.done === done);\r\n    }\r\n\r\n    async delete(id: number): Promise<void> {\r\n        const list: Item[] = await this.all();\r\n\r\n        const index = list.findIndex(item => item.id === id);\r\n\r\n        if (index !== -1) {\r\n            list.splice(index, 1);\r\n        }\r\n\r\n        await LocalForage.setItem<Item[]>(KEY, list);\r\n    }\r\n\r\n    async edit(id: number, item: Partial<Item>): Promise<void> {\r\n        const list: Item[] = await this.all();\r\n\r\n        const foundItem = list.find(item => item.id === id);\r\n\r\n        Object.assign(foundItem, item);\r\n\r\n        await LocalForage.setItem<Item[]>(KEY, list);\r\n    }\r\n\r\n    async create(text: string): Promise<void> {\r\n        const list: Item[] = await this.all();\r\n        const lastInsertedID = list.length ? list[list.length - 1].id : 0;\r\n\r\n        list.push({\r\n            id: lastInsertedID + 1,\r\n            text,\r\n            done: false\r\n        });\r\n\r\n        await LocalForage.setItem<Item[]>(KEY, list);\r\n    }\r\n}\r\n\r\nexport default new ListService();","import React from 'react';\r\nimport { Item } from \"../services/list.service\";\r\n\r\ninterface State {\r\n    text: string;\r\n    editing: boolean;\r\n}\r\n\r\ninterface Props {\r\n    item: Item;\r\n    onCheck?: () => void;\r\n    onEdit?: (text: string) => void;\r\n    onDelete?: () => void;\r\n}\r\n\r\nexport class ListItem extends React.Component<Props, State> {\r\n    private get text(): string {\r\n        return this.state.text;\r\n    }\r\n\r\n    private set text(text: string) {\r\n        this.setState({text});\r\n    }\r\n\r\n    constructor(props: Readonly<Props> | Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            text: '',\r\n            editing: false\r\n        }\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const { editing } = this.state;\r\n        const { item, onCheck, onDelete } = this.props;\r\n        const classList = ['item'];\r\n\r\n        if (editing) {\r\n            classList.push('editing');\r\n        }\r\n\r\n        if (item.done) {\r\n            classList.push('done');\r\n        }\r\n\r\n        return (\r\n            <li className={classList.join(' ')}>\r\n                <label className=\"container\">\r\n                    {editing\r\n                        ? <input className=\"input-edit\" type=\"text\" value={this.text} onChange={e => this.text = e.target.value} />\r\n                        : <span className=\"text\">{item.text}</span>\r\n                    }\r\n                    <span className=\"checkmark\" onClick={() => onCheck?.()} />\r\n                </label>\r\n                {editing\r\n                    ? <i className=\"icon-edit fas fa-check\" onClick={() => this.leaveEditMode()} />\r\n                    : <i className=\"icon-edit far fa-edit\" onClick={() => this.enterEditMode()} />\r\n                }\r\n                {editing || <i className=\"fas fa-times icon-close\" onClick={() => onDelete?.()} />}\r\n            </li>\r\n        );\r\n    }\r\n\r\n    private enterEditMode(): void {\r\n        this.text = this.props.item.text;\r\n        this.setState({editing: true});\r\n    }\r\n\r\n    private leaveEditMode(): void {\r\n        if (this.text !== this.props.item.text) {\r\n            this.props.onEdit?.(this.text);\r\n        }\r\n\r\n        this.setState({editing: false});\r\n    }\r\n}","import React from 'react';\r\nimport ListService, { Item } from '../services/local-list.service';\r\nimport { ListItem } from \"./ListItem\";\r\n\r\ninterface Filter {\r\n    done?: boolean;\r\n    label: string;\r\n}\r\n\r\ninterface State {\r\n    items: Item[];\r\n    text: string;\r\n    done?: boolean;\r\n}\r\n\r\ninterface Props {\r\n}\r\n\r\nexport class List extends React.Component<Props, State> {\r\n    private get text(): string {\r\n        return this.state.text;\r\n    }\r\n\r\n    private set text(value: string) {\r\n        this.setState({\r\n            text: value\r\n        });\r\n    }\r\n\r\n    private readonly filters: Filter[] = [{\r\n        label: 'All'\r\n    }, {\r\n        label: 'made',\r\n        done: true\r\n    }, {\r\n        label: 'todo',\r\n        done: false\r\n    }]\r\n\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            items: [],\r\n            text: '',\r\n        };\r\n\r\n        this.fetchData = this.fetchData.bind(this);\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.fetchData();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any) {\r\n        if (prevState.done !== this.state.done) {\r\n            this.fetchData();\r\n        }\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const { items } = this.state;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"box-header\">\r\n                    <input className=\"input\" type=\"text\" placeholder=\"Your tasks..\" autoFocus\r\n                           onKeyDown={e => e.code === 'Enter' && this.enter(this.text)}\r\n                           value={this.text}\r\n                           onChange={e => this.text = (e.target as HTMLInputElement).value}/>\r\n                </div>\r\n                <div className=\"box-section\">\r\n                    <ul className=\"ul\">\r\n                        {items.map(item => <ListItem key={item.id} item={item}\r\n                                                     onCheck={() => this.checkItem(item)}\r\n                                                     onDelete={() => this.deleteItem(item.id)}\r\n                                                     onEdit={text => this.editItem(item.id, text)}\r\n                        />)}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"box-footer\">\r\n                    {this.filters.map((filter, index) =>\r\n                        <div key={index} className={'condition' + (this.state.done === filter.done ? ' active' : '')} onClick={() => this.setState({done: filter.done})}>\r\n                            {filter.label}\r\n                        </div>)}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private fetchData(): void {\r\n        ListService.all(this.state?.done).then(items => this.setState({items}));\r\n    }\r\n\r\n    private checkItem(item: Item): void {\r\n        ListService.edit(item.id, {done: !item.done})\r\n            .then(this.fetchData);\r\n    }\r\n\r\n    private editItem(id: number, text: string) {\r\n        ListService.edit(id, {text})\r\n            .then(this.fetchData);\r\n    }\r\n\r\n    private createItem(text: string) {\r\n        ListService.create(text)\r\n            .then(this.fetchData)\r\n            .then(() => this.setState({text: ''}));\r\n    }\r\n\r\n    private deleteItem(id: number) {\r\n        if (window.confirm('Are you sure?')) {\r\n            ListService.delete(id).then(this.fetchData);\r\n        }\r\n    }\r\n\r\n    private enter(text: string): void {\r\n        text = text.trim();\r\n\r\n        if (text) {\r\n            this.createItem(text);\r\n        }\r\n    }\r\n}","import React from 'react';\nimport { List } from \"./List\";\n\nfunction App() {\n  return (\n      <div className=\"box\">\n          <List />\n      </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}